# Define output file
$OutputFile = "AzureVMDetails.csv"

# Define resource groups (Modify this list as needed)
$ResourceGroups = @("RG1", "RG2", "RG3")  # <-- Replace with your actual resource group names

# Login to Azure (if not logged in)
Connect-AzAccount

# Initialize an array to store VM details
$VMData = @()

# Loop through each resource group
foreach ($ResourceGroup in $ResourceGroups) {
    # Get Subscription ID associated with the Resource Group
    $RGDetails = Get-AzResourceGroup -Name $ResourceGroup -ErrorAction SilentlyContinue
    if (-not $RGDetails) {
        Write-Host "Resource Group '$ResourceGroup' not found. Skipping..."
        continue
    }
    
    $SubscriptionID = $RGDetails.SubscriptionId
    Write-Host "Processing Resource Group: $ResourceGroup in Subscription: $SubscriptionID"

    # Set Azure context to the correct subscription
    Set-AzContext -SubscriptionId $SubscriptionID

    # Get all VMs in the resource group
    $VMs = Get-AzVM -ResourceGroupName $ResourceGroup -ErrorAction SilentlyContinue

    foreach ($VM in $VMs) {
        $VMName = $VM.Name
        $VMSize = $VM.HardwareProfile.VmSize

        # Get VM Size details (vCPUs, Memory)
        $VMSizeDetails = Get-AzVMSize -Location $VM.Location | Where-Object { $_.Name -eq $VMSize }
        $vCPUs = $VMSizeDetails.NumberOfCores
        $MemoryGB = [math]::Round($VMSizeDetails.MemoryInMB / 1024, 2)

        # Get CPU Utilization (Last 1 Hour Average)
        $CPUUtilization = (Get-AzMetric -ResourceId $VM.Id -MetricName "Percentage CPU" -TimeGrain 00:01:00 -AggregationType Average -WarningAction SilentlyContinue).Data.Average
        if (-not $CPUUtilization) { $CPUUtilization = "N/A" }

        # Get OS Disk Name
        $OSDisk = $VM.StorageProfile.OsDisk.Name

        # Get Data Disks (comma-separated)
        $DataDisks = $VM.StorageProfile.DataDisks | Select-Object -ExpandProperty Name -ErrorAction SilentlyContinue
        if ($DataDisks) { $DataDisks = $DataDisks -join ", " } else { $DataDisks = "None" }

        # Get Disk Space (Total and Free) using RunCommand
        if ($VM.OsProfile.WindowsConfiguration) {
            # Windows VM Disk Info
            $DiskInfo = Invoke-AzVMRunCommand -ResourceGroupName $ResourceGroup -VMName $VMName -CommandId "RunPowerShellScript" -ScriptString "Get-PSDrive -PSProvider FileSystem | Select-Object Name,Used,Free,DisplayRoot" -ErrorAction SilentlyContinue
            $DiskDetails = $DiskInfo.Value[0].Message | ConvertFrom-Csv
        } else {
            # Linux VM Disk Info
            $DiskInfo = Invoke-AzVMRunCommand -ResourceGroupName $ResourceGroup -VMName $VMName -CommandId "RunShellScript" -ScriptString "df -h --output=source,size,used,avail,pcent,target | tail -n +2" -ErrorAction SilentlyContinue
            $DiskDetails = $DiskInfo.Value[0].Message -split "`n" | ForEach-Object {
                ($_ -split "\s+") | Select-Object @{Name="Disk"; Expression={$_[0]}}, @{Name="Total"; Expression={$_[1]}}, @{Name="Used"; Expression={$_[2]}}, @{Name="Free"; Expression={$_[3]}}, @{Name="Mounted"; Expression={$_[5]}}
            }
        }

        # Get total and free disk space (sum of all disks)
        $TotalDiskSpace = ($DiskDetails.Total -as [double[]] | Measure-Object -Sum).Sum
        $FreeDiskSpace = ($DiskDetails.Free -as [double[]] | Measure-Object -Sum).Sum

        # Store VM details in an object
        $VMData += [PSCustomObject]@{
            "VM Name"           = $VMName
            "Resource Group"    = $ResourceGroup
            "Subscription ID"   = $SubscriptionID
            "Size"              = $VMSize
            "vCPUs"             = $vCPUs
            "Memory (GB)"       = $MemoryGB
            "CPU Utilization (%)" = $CPUUtilization
            "OS Disk"           = $OSDisk
            "Data Disks"        = $DataDisks
            "Total Disk Space (GB)" = $TotalDiskSpace
            "Free Disk Space (GB)"  = $FreeDiskSpace
        }
    }
}

# Export to CSV
$VMData | Export-Csv -Path $OutputFile -NoTypeInformation

Write-Host "Export completed! Data saved in: $OutputFile"
