# -----------------------------
# Helper Function: Install Feature if Missing
# -----------------------------
function Install-FeatureIfMissing {
    param (
        [string]$FeatureName,
        [string]$DisplayName
    )
    
    $feature = Get-WindowsFeature -Name $FeatureName
    if (-not $feature.Installed) {
        Write-Host "Installing $DisplayName..." -ForegroundColor Cyan
        Install-WindowsFeature -Name $FeatureName -IncludeManagementTools
    } else {
        Write-Host "$DisplayName is already installed." -ForegroundColor Green
    }
}

# -----------------------------
# Install IIS and ASP.NET 4.8
# -----------------------------
Install-FeatureIfMissing -FeatureName "Web-Server" -DisplayName "IIS"
Install-FeatureIfMissing -FeatureName "Web-Asp-Net45" -DisplayName "ASP.NET 4.8"
Install-FeatureIfMissing -FeatureName "Web-Net-Ext45" -DisplayName ".NET Extensibility 4.8"
Install-FeatureIfMissing -FeatureName "Web-ISAPI-Ext" -DisplayName "ISAPI Extensions"
Install-FeatureIfMissing -FeatureName "Web-ISAPI-Filter" -DisplayName "ISAPI Filters"

# -----------------------------
# Install .NET 4.8 Runtime (if missing)
# -----------------------------
if (-not (Test-Path "C:\Program Files\dotnet\shared\Microsoft.NETCore.App\4.8*")) {
    Write-Host "Installing .NET 4.8 Runtime..." -ForegroundColor Cyan
    Add-WindowsFeature NET-Framework-Features, NET-Framework-45-Core
} else {
    Write-Host ".NET 4.8 Runtime is already installed." -ForegroundColor Green
}

# -----------------------------
# Install .NET 8.0 Hosting Bundle
# -----------------------------
$dotnetPath = "C:\Program Files\dotnet"
if (-not (Test-Path "$dotnetPath\shared\Microsoft.NETCore.App\8.0*")) {
    $dotnetUrl = "https://download.visualstudio.microsoft.com/download/pr/36bc5d9f-57df-44a5-9248-828b3c3f96cc/77509dcfc25709bc5f289d0c4e2a1c55/dotnet-hosting-8.0.3-win-x64.exe"
    $dotnetInstaller = "$env:TEMP\dotnet-hosting-8.0.3-win-x64.exe"
    Invoke-WebRequest -Uri $dotnetUrl -OutFile $dotnetInstaller
    Write-Host "Installing .NET 8.0 Hosting Bundle..." -ForegroundColor Cyan
    Start-Process -FilePath $dotnetInstaller -ArgumentList "/quiet", "/norestart" -Wait
    Remove-Item -Path $dotnetInstaller -Force
} else {
    Write-Host ".NET 8.0 Hosting Bundle is already installed." -ForegroundColor Green
}

# -----------------------------
# Install WebDeploy (if missing)
# -----------------------------
$webDeployPath = "C:\Program Files\IIS\Microsoft Web Deploy V3"
if (-not (Test-Path $webDeployPath)) {
    $webDeployUrl = "https://download.microsoft.com/download/7/5/F/75F9B197-4A87-42C8-88F8-91562A1EF2BD/WebDeploy_amd64_en-US.msi"
    $webDeployInstaller = "$env:TEMP\WebDeploy_amd64.msi"
    Invoke-WebRequest -Uri $webDeployUrl -OutFile $webDeployInstaller
    Write-Host "Installing WebDeploy..." -ForegroundColor Cyan
    Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$webDeployInstaller`" /quiet /norestart" -Wait
    Remove-Item -Path $webDeployInstaller -Force
} else {
    Write-Host "WebDeploy is already installed." -ForegroundColor Green
}

# -----------------------------
# Install Miniconda for All Users (if missing)
# -----------------------------
$minicondaPath = "C:\ProgramData\Miniconda3"
if (-not (Test-Path $minicondaPath)) {
    $minicondaUrl = "https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe"
    $minicondaInstaller = "$env:TEMP\Miniconda3-latest-Windows-x86_64.exe"
    Invoke-WebRequest -Uri $minicondaUrl -OutFile $minicondaInstaller
    Write-Host "Installing Miniconda..." -ForegroundColor Cyan
    Start-Process -FilePath $minicondaInstaller -ArgumentList "/InstallationType=AllUsers", "/AddToPath=1", "/RegisterPython=1", "/S", "/D=$minicondaPath" -Wait
    Remove-Item -Path $minicondaInstaller -Force
} else {
    Write-Host "Miniconda is already installed." -ForegroundColor Green
}

# -----------------------------
# Install Vault Certificate (if missing)
# -----------------------------
$vaultCertPath = "Cert:\LocalMachine\Root"
$vaultCertThumbprint = "<VAULT_CERT_THUMBPRINT>"  # Replace with your Vault certificate thumbprint
$vaultUrl = "https://<YOUR_VAULT_URL>:8200/v1/pki/ca/pem"  # Replace with your Vault CA URL
$certFilePath = "$env:TEMP\vault-ca-cert.pem"

# Check if the Vault certificate is already installed
if (-not (Get-ChildItem $vaultCertPath | Where-Object { $_.Thumbprint -eq $vaultCertThumbprint })) {
    Write-Host "Installing Vault Certificate..." -ForegroundColor Cyan
    Invoke-WebRequest -Uri $vaultUrl -OutFile $certFilePath
    Import-Certificate -FilePath $certFilePath -CertStoreLocation $vaultCertPath
    Remove-Item -Path $certFilePath -Force
} else {
    Write-Host "Vault certificate is already installed." -ForegroundColor Green
}

# -----------------------------
# Grant Private Key Access to User
# -----------------------------
$targetUser = "PROD\myaccount"  # Replace with your user account
$certStorePath = "C:\ProgramData\Microsoft\Crypto\RSA\MachineKeys"
$cert = Get-ChildItem "Cert:\LocalMachine\My" | Where-Object { $_.Thumbprint -eq $vaultCertThumbprint }

if ($cert) {
    $certFile = Get-ChildItem -Path $certStorePath | Where-Object { $_.Name -match $cert.Thumbprint }
    
    if ($certFile) {
        Write-Host "Granting private key access to $targetUser..." -ForegroundColor Cyan
        $acl = Get-Acl -Path "$certStorePath\$($certFile.Name)"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($targetUser, "FullControl", "Allow")
        $acl.AddAccessRule($accessRule)
        Set-Acl -Path "$certStorePath\$($certFile.Name)" -AclObject $acl
    } else {
        Write-Host "Private key not found!" -ForegroundColor Red
    }
} else {
    Write-Host "Vault certificate not found!" -ForegroundColor Red
}

# -----------------------------
# Restart IIS
# -----------------------------
Write-Host "Restarting IIS..." -ForegroundColor Yellow
Restart-Service W3SVC

Write-Host "`nAll required components have been installed and configured!" -ForegroundColor Green


---------COnda 
# -----------------------------
# Variables
# -----------------------------
$minicondaPath = "C:\ProgramData\Miniconda3"
$condaActivate = "$minicondaPath\Scripts\activate"
$condaExe = "$minicondaPath\Scripts\conda.exe"
$condaProfilePath = "$env:USERPROFILE\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1"

# -----------------------------
# List of Conda Packages to Check and Install
# -----------------------------
$packages = @(
    "numpy",
    "pandas",
    "scipy",
    "matplotlib",
    "scikit-learn",
    "seaborn",
    "requests",
    "beautifulsoup4",
    "pillow",
    "pytest",
    "pyspark",
    "jupyterlab"
)

# -----------------------------
# Check if Miniconda is Installed
# -----------------------------
if (-not (Test-Path $minicondaPath)) {
    Write-Host "Miniconda is not installed. Please install it first." -ForegroundColor Red
    Exit
}

# -----------------------------
# Run 'conda init' if not already initialized
# -----------------------------
if (!(Test-Path "$env:USERPROFILE\.conda\envs")) {
    Write-Host "Running 'conda init' to initialize Conda for PowerShell..." -ForegroundColor Yellow
    & $condaExe init powershell

    # Manually source the Conda initialization script
    Write-Host "Sourcing Conda initialization script..." -ForegroundColor Cyan

    if (Test-Path $condaProfilePath) {
        . $condaProfilePath  # Manually load the profile into the current session
    } else {
        Write-Host "No Conda profile found. Proceeding without sourcing." -ForegroundColor Yellow
    }
}

# -----------------------------
# Add Miniconda to PATH (If Not Added)
# -----------------------------
if (-not ($env:Path -match "Miniconda3")) {
    Write-Host "Adding Miniconda to PATH temporarily..." -ForegroundColor Yellow
    $env:Path += ";$minicondaPath;$minicondaPath\Scripts;$minicondaPath\Library\bin"
}

# -----------------------------
# Function to Check if a Package is Installed
# -----------------------------
function Check-Package {
    param([string]$package)
    
    # Activate conda environment and run pip show
    $output = & "$condaActivate" base; pip show $package 2>&1
    return $output -match "Name: $package"
}

# -----------------------------
# Loop Through the Array and Check for Missing Packages
# -----------------------------
$missingPackages = @()

foreach ($pkg in $packages) {
    if (-not (Check-Package -package $pkg)) {
        Write-Host "$pkg not found. Adding to install list..." -ForegroundColor Yellow
        $missingPackages += $pkg
    } else {
        Write-Host "$pkg is already installed." -ForegroundColor Green
    }
}

# -----------------------------
# Install Missing Packages
# -----------------------------
if ($missingPackages.Count -gt 0) {
    Write-Host "`nInstalling missing packages: $($missingPackages -join ', ')..." -ForegroundColor Cyan

    # Activate the base environment and install missing packages
    & "$condaActivate" base; pip install $($missingPackages -join ' ')

    Write-Host "`n✅ Missing packages installed successfully!" -ForegroundColor Green
} else {
    Write-Host "`nAll packages are already installed. No action needed." -ForegroundColor Green
}

# -----------------------------
# Verify Installations
# -----------------------------
Write-Host "`nVerifying installations..." -ForegroundColor Cyan

& "$condaActivate" base; pip show $($packages -join ' ')

Write-Host "`n✅ All packages verification completed!" -ForegroundColor Green



----------------webiste settings
# -----------------------------
# Variables
# -----------------------------
$siteName = "MyNewWebsite"
$appPoolName = "MyAppPool"
$physicalPath = "C:\inetpub\wwwroot\MyNewWebsite"
$port = 8080
$ipAddress = "*"
$hostHeader = "localhost"  # Use your desired domain name
$siteID = 1001  # Custom site ID

# Additional Bindings (Array of Bindings)
$bindings = @(
    @{IPAddress = "*"; Port = 8081; Hostname = "localhost" },
    @{IPAddress = "*"; Port = 8082; Hostname = "test.local" }
)

# -----------------------------
# Check if IIS is Installed, If Not Install It
# -----------------------------
if (-not (Get-WindowsFeature -Name "Web-Server").Installed) {
    Write-Host "IIS is not installed. Installing IIS..." -ForegroundColor Yellow
    Install-WindowsFeature -Name "Web-Server" -IncludeManagementTools
    Write-Host "IIS installed successfully!" -ForegroundColor Green
}

# -----------------------------
# Create the Physical Directory If It Doesn't Exist
# -----------------------------
if (-not (Test-Path -Path $physicalPath)) {
    Write-Host "Creating directory: $physicalPath" -ForegroundColor Cyan
    New-Item -ItemType Directory -Path $physicalPath -Force
}

# -----------------------------
# Create a New Application Pool
# -----------------------------
if (-not (Get-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue)) {
    Write-Host "Creating application pool: $appPoolName" -ForegroundColor Cyan
    New-WebAppPool -Name $appPoolName
} else {
    Write-Host "Application pool '$appPoolName' already exists." -ForegroundColor Green
}

# -----------------------------
# Create a New Website with Specific ID
# -----------------------------
if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
    Write-Host "Creating website: $siteName with ID: $siteID" -ForegroundColor Cyan
    
    # Create Website
    New-Website -Name $siteName `
                -Port $port `
                -IPAddress $ipAddress `
                -HostHeader $hostHeader `
                -PhysicalPath $physicalPath `
                -ApplicationPool $appPoolName

    # Set Custom Site ID
    $site = Get-Website -Name $siteName
    if ($site) {
        $site.ID = $siteID
        $site | Set-Item
        Write-Host "Site ID set to $siteID" -ForegroundColor Green
    }
} else {
    Write-Host "Website '$siteName' already exists." -ForegroundColor Green
}

# -----------------------------
# Configure Multiple Bindings
# -----------------------------
foreach ($binding in $bindings) {
    $existingBinding = Get-WebBinding -Name $siteName | Where-Object {
        $_.bindingInformation -eq "$($binding.IPAddress):$($binding.Port):$($binding.Hostname)"
    }

    if (-not $existingBinding) {
        Write-Host "Adding binding: $($binding.IPAddress):$($binding.Port) ($($binding.Hostname))" -ForegroundColor Cyan
        New-WebBinding -Name $siteName `
                       -IPAddress $binding.IPAddress `
                       -Port $binding.Port `
                       -HostHeader $binding.Hostname `
                       -Protocol "http"
    } else {
        Write-Host "Binding already exists: $($binding.IPAddress):$($binding.Port)" -ForegroundColor Yellow
    }
}

# -----------------------------
# Start the Website
# -----------------------------
Start-Website -Name $siteName
Write-Host "Website '$siteName' is now running at http://$hostHeader`:$port" -ForegroundColor Green

# -----------------------------
# Display Website Details
# -----------------------------
Get-Website -Name $siteName | Select-Object Name, ID, State, @{Name="Bindings"; Expression={$_.Bindings.Collection}} | Format-List
