# ------------------------ CONFIG ------------------------
$subscriptionId = "<your-subscription-id>"
$resourceGroup = "<your-resource-group-name>"
$dataFactoryName = "<your-adf-name>"
$apiVersion = "2018-06-01"

$token = (az account get-access-token --query accessToken -o tsv)
$headers = @{ Authorization = "Bearer $token" }
$baseUri = "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.DataFactory/factories/$dataFactoryName"

# ------------------------ Topological Sort ------------------------
function TopoSort($depMap) {
    $inDegree = @{}
    $graph = @{}

    foreach ($item in $depMap.Keys) {
        $graph[$item] = $depMap[$item]
        if (-not $inDegree.ContainsKey($item)) { $inDegree[$item] = 0 }
        foreach ($dep in $depMap[$item]) {
            if (-not $inDegree.ContainsKey($dep)) { $inDegree[$dep] = 0 }
            $inDegree[$dep]++
        }
    }

    $queue = [System.Collections.Generic.Queue[string]]::new()
    foreach ($node in $inDegree.Keys) {
        if ($inDegree[$node] -eq 0) { $queue.Enqueue($node) }
    }

    $sorted = @()
    while ($queue.Count -gt 0) {
        $node = $queue.Dequeue()
        $sorted += $node
        foreach ($neighbor in $graph[$node]) {
            $inDegree[$neighbor]--
            if ($inDegree[$neighbor] -eq 0) {
                $queue.Enqueue($neighbor)
            }
        }
    }

    return $sorted
}

# ------------------------ DELETE TRIGGERS ------------------------
Write-Output "`n--- Disabling and Deleting Triggers ---"
$uri = "$baseUri/triggers?api-version=$apiVersion"
Write-Host "GET $uri"
$triggers = (Invoke-RestMethod -Uri $uri -Headers $headers).value

foreach ($trigger in $triggers) {
    $name = $trigger.name

    $stopUri = "$baseUri/triggers/$name/stop?api-version=$apiVersion"
    Write-Host "POST $stopUri"
    Invoke-RestMethod -Method Post -Uri $stopUri -Headers $headers -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2

    $delUri = "$baseUri/triggers/$name?api-version=$apiVersion"
    Write-Host "DELETE $delUri"
    Invoke-RestMethod -Method Delete -Uri $delUri -Headers $headers -ErrorAction SilentlyContinue
}

# ------------------------ DELETE PIPELINES ------------------------
Write-Output "`n--- Analyzing and Deleting Pipelines ---"
$pipelineList = (Invoke-RestMethod -Uri "$baseUri/pipelines?api-version=$apiVersion" -Headers $headers).value
$pipelineDeps = @{}

foreach ($pipeline in $pipelineList) {
    $name = $pipeline.name
    $details = Invoke-RestMethod -Uri "$baseUri/pipelines/$name?api-version=$apiVersion" -Headers $headers
    $deps = @()

    foreach ($activity in $details.properties.activities) {
        if ($activity.type -eq "ExecutePipeline") {
            $deps += $activity.typeProperties.pipeline.referenceName
        }
    }
    $pipelineDeps[$name] = $deps
}

$sortedPipelines = TopoSort $pipelineDeps
foreach ($name in ($sortedPipelines | Sort-Object -Descending)) {
    $delUri = "$baseUri/pipelines/$name?api-version=$apiVersion"
    Write-Host "DELETE $delUri"
    Invoke-RestMethod -Method Delete -Uri $delUri -Headers $headers -ErrorAction SilentlyContinue
}

# ------------------------ DELETE DATA FLOWS ------------------------
Write-Output "`n--- Deleting Data Flows ---"
$dataflows = (Invoke-RestMethod -Uri "$baseUri/dataflows?api-version=$apiVersion" -Headers $headers -ErrorAction SilentlyContinue).value
foreach ($df in $dataflows) {
    $name = $df.name
    $delUri = "$baseUri/dataflows/$name?api-version=$apiVersion"
    Write-Host "DELETE $delUri"
    Invoke-RestMethod -Method Delete -Uri $delUri -Headers $headers -ErrorAction SilentlyContinue
}

# ------------------------ DELETE DATASETS ------------------------
Write-Output "`n--- Analyzing and Deleting Datasets ---"
$datasets = (Invoke-RestMethod -Uri "$baseUri/datasets?api-version=$apiVersion" -Headers $headers).value
$datasetDeps = @{}

foreach ($ds in $datasets) {
    $name = $ds.name
    $details = Invoke-RestMethod -Uri "$baseUri/datasets/$name?api-version=$apiVersion" -Headers $headers
    $linked = $details.properties.linkedServiceName.referenceName
    $datasetDeps[$name] = @($linked)
}

$sortedDatasets = TopoSort $datasetDeps
foreach ($name in ($sortedDatasets | Sort-Object -Descending)) {
    $delUri = "$baseUri/datasets/$name?api-version=$apiVersion"
    Write-Host "DELETE $delUri"
    Invoke-RestMethod -Method Delete -Uri $delUri -Headers $headers -ErrorAction SilentlyContinue
}

# ------------------------ DELETE LINKED SERVICES ------------------------
Write-Output "`n--- Deleting Linked Services ---"
$linkedServices = (Invoke-RestMethod -Uri "$baseUri/linkedservices?api-version=$apiVersion" -Headers $headers).value
foreach ($ls in $linkedServices) {
    $name = $ls.name
    $delUri = "$baseUri/linkedservices/$name?api-version=$apiVersion"
    Write-Host "DELETE $delUri"
    Invoke-RestMethod -Method Delete -Uri $delUri -Headers $headers -ErrorAction SilentlyContinue
}

Write-Output "`nâœ… All deletions complete (except Integration Runtimes)."
